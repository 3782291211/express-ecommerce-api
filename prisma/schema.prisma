generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING") // used for migrations
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model CartItem {
  customerId Int
  productId  Int
  quantity   Int?
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([customerId, productId])
}

model WishlistItem {
  customerId Int
  productId  Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([customerId, productId])
}

model Address {
  id               Int        @id @default(autoincrement())
  addressLine1     String
  addressLine2     String?
  city             String
  county           String?
  postcode         String
  orderBilling     Order[]    @relation("billingAddress")
  orderShipping    Order[]    @relation("shippingAddress")
  customerBilling  Customer[] @relation("billingAddress")
  customerShipping Customer[] @relation("shippingAddress")

  @@unique([addressLine1, addressLine2, city, postcode])
}

model Customer {
  id                Int        @id @default(autoincrement())
  name              String     @db.VarChar(50)
  username          String     @unique @db.VarChar(50)
  password          String?
  email             String     @db.VarChar(50)
  joinDate          DateTime?  @default(now()) @db.Timestamp(6)
  phone             String?
  billingAddressId  Int?
  shippingAddressId Int?
  avatar            String?
  cartItems         CartItem[]
  wishlistItems     WishlistItem[]
  orders            Order[]
  reviews           Review[]
  billingAddress    Address?   @relation("billingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address?   @relation("shippingAddress", fields: [shippingAddressId], references: [id])
  oAuth             OAuthProfile?
}

model OAuthProfile {
  authId      String
  customerId  Int       @unique
  provider    String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([authId, provider])
}

model OrderItem {
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model Order {
  id                Int         @id @default(autoincrement())
  customerId        Int
  billingAddressId  Int
  shippingAddressId Int
  status            String      @db.VarChar(20)
  paymentMethod     String
  total             Decimal     @db.Decimal(6, 2)
  createdAt         DateTime    @default(now()) @db.Timestamp(6)
  orderItems        OrderItem[]
  customer          Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  reviews           Review[]
  billingAddress    Address     @relation("billingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address     @relation("shippingAddress", fields: [shippingAddressId], references: [id])
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  price         Decimal        @db.Decimal(6, 2)
  stock         Int
  categoryName  String
  supplierName  String
  thumbnail     String?
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]
  category      Category       @relation(fields: [categoryName], references: [name], onDelete: NoAction, onUpdate: NoAction)
  supplier      Supplier       @relation(fields: [supplierName], references: [name], onDelete: NoAction, onUpdate: NoAction)
}

model Review {
  id         Int      @id @default(autoincrement())
  customerId Int
  productId  Int
  orderId    Int
  title      String
  body       String
  recommend  Boolean?
  rating     Int
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  order      Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([customerId, productId])
}

model Category {
  id          Int       @default(autoincrement())
  name        String    @id @db.VarChar(50)
  description String
  thumbnail   String
  products    Product[]
}

model Supplier {
  id            Int       @default(autoincrement())
  name          String    @id
  description   String
  location      String
  establishYear Int
  thumbnail     String
  products      Product[]
}
